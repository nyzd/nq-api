"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
PROJECT_NAME = os.path.basename(BASE_DIR)

env = environ.Env()
environ.Env.read_env(env_file=BASE_DIR.parent / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", default="secret")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = bool(os.environ.get("DEBUG", default=0))
DEBUG = True

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "127.0.0.1").split(",")

CSRF_TRUSTED_ORIGINS = os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS","http://127.0.0.1").split(",")

CORS_ALLOWED_ORIGINS = os.getenv("DJANGO_CORS_ALLOWED_ORIGINS ","http://localhost:3000").split(",")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'knox',
    'drf_spectacular',
    'quran',
    'account',
    'core',
    'django_filters',
    'debug_toolbar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        'NAME': os.environ.get("DATABASE_NAME", "postgres"),
        'USER': os.environ.get("DATABASE_USERNAME", "postgres"),
        'PASSWORD': os.environ.get("DATABASE_PASSWORD", 'password'),
        'HOST': os.environ.get("DATABASE_HOST", 'localhost'),
        'PORT': os.environ.get("DATABASE_PORT", '5432')
    }
}

# Password validation

# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

# Custom user model
AUTH_USER_MODEL = 'account.CustomUser'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'knox.auth.TokenAuthentication',
        # for local development
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    # YOUR SETTINGS
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    # Limit default parsers to JSON only - multipart will be added per-action as needed
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Natiq API',
    'DESCRIPTION': 'Natiq Quran API',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # Postprocessing hooks to adjust generated OpenAPI schema
    'POSTPROCESSING_HOOKS': [
        'api.schema_hooks.set_ordering_enum',
    ],
    # Tag order and descriptions for the OpenAPI schema
    'TAGS': [
        {
            'name': 'general',
            'description': 'General purpose endpoints',
        },
        {
            'name': 'auth',
            'description': 'Authentication and authorization endpoints (login, logout, register, token management)',
        },
        {
            'name': 'profile',
            'description': "Endpoints for retrieving and updating the current user's profile",
        },
        {
            'name': 'users',
            'description': 'Admin-only endpoints to list, create, update and delete users',
        },
        {
            'name': 'groups',
            'description': 'Admin-only endpoints to manage permission groups',
        },
        {
            'name': 'mushafs',
            'description': 'Manage Quranic manuscripts / editions',
        },
        {
            'name': 'surahs',
            'description': 'Manage chapters of the Quran (Surahs)',
        },
        {
            'name': 'ayahs',
            'description': 'Manage verses of the Quran (Ayahs)',
        },
        {
            'name': 'words',
            'description': 'Manage words within Quranic verses',
        },
        {
            'name': 'translations',
            'description': 'Create, update and list Quran translations and their verse/ayah translations',
        },
        {
            'name': 'recitations',
            'description': 'Manage audio recitations of the Quran',
        },
        {
            'name': 'takhtits',
            'description': 'Manage takhtits (textual annotations) for Quranic verses',
        },
        {
            'name': 'phrases',
            'description': 'Create and maintain phrases for the application',
        },
        {
            'name': 'notifications',
            'description': 'Endpoints related to user notifications',
        },
        {
            'name': 'health',
            'description': 'Health check endpoints for monitoring system status',
        },
    ],
    # OTHER SETTINGS
}

from datetime import timedelta
REST_KNOX = {
    'TOKEN_TTL': timedelta(days=30),
    'AUTO_REFRESH': True,
    'TOKEN_LIMIT_PER_USER': None,
}

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
}


LOCATION_PREFIX = ""
PUBLIC_MEDIA_LOCATION = f"{LOCATION_PREFIX}media"
PRIVATE_MEDIA_LOCATION = f"{LOCATION_PREFIX}private"

AWS_DEFAULT_ACL = None
AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID", default="")
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY", default="")
AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME", default="natiq")
# Set "virtual" for https://<bucket_name>.<endpoint>.com
# Set "path" for https://<endpoint>.com/<bucket_name>
# Hetzner Object Storage uses "virtual".
AWS_S3_ADDRESSING_STYLE = "virtual"
AWS_S3_ENDPOINT_URL = env(
    "AWS_S3_ENDPOINT_URL",
    default=""
)
AWS_DEFAULT_ACL = None # private by default
# prefix for this project's files on the Bucket, "" to disable
LOCATION_PREFIX = env("LOCATION_PREFIX", default=f"{PROJECT_NAME}/")
PUBLIC_MEDIA_LOCATION = f"{LOCATION_PREFIX}media"
PRIVATE_MEDIA_LOCATION = f"{LOCATION_PREFIX}private"
MEDIA_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/{LOCATION_PREFIX}media/"
STORAGES["default"] = {
    "BACKEND": "media_app.storage_backends.PublicMediaStorage"
}
PRESIGNED_URL_EXPIRATION = env.int("PRESIGNED_URL_EXPIRATION", default=600)

# Forced Alignment API endpoint
FORCED_ALIGNMENT_API_URL = os.environ.get('FORCED_ALIGNMENT_API_URL', 'http://localhost:5000')
FORCED_ALIGNMENT_SECRET_KEY = os.environ.get('FORCED_ALIGNMENT_SECRET_KEY', '')

# Celery configuration
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL','amqp://guest:guest@localhost:5672//')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'rpc://')
CELERY_ACCEPT_CONTENT = ['pickle', 'application/json']
