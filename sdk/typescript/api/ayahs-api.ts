/* tslint:disable */
/* eslint-disable */
/**
 * Natiq API
 * Natiq Quran API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Ayah } from '../models';
// @ts-ignore
import type { AyahAdd } from '../models';
// @ts-ignore
import type { AyahSerializerView } from '../models';
// @ts-ignore
import type { PatchedAyah } from '../models';
/**
 * AyahsApi - axios parameter creator
 */
export const AyahsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Ayah record
         * @param {AyahAdd} ayahAdd 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ayahsCreate: async (ayahAdd: AyahAdd, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ayahAdd' is not null or undefined
            assertParamExists('ayahsCreate', 'ayahAdd', ayahAdd)
            const localVarPath = `/ayahs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ayahAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an Ayah record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ayahsDestroy: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('ayahsDestroy', 'uuid', uuid)
            const localVarPath = `/ayahs/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Ayahs (Quran verses)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {AyahsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [search] A search term.
         * @param {string} [surahUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ayahsList: async (limit?: number, offset?: number, ordering?: AyahsListOrderingEnum, search?: string, surahUuid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ayahs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (surahUuid !== undefined) {
                localVarQueryParameter['surah_uuid'] = surahUuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partially update an Ayah record
         * @param {string} uuid 
         * @param {PatchedAyah} [patchedAyah] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ayahsPartialUpdate: async (uuid: string, patchedAyah?: PatchedAyah, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('ayahsPartialUpdate', 'uuid', uuid)
            const localVarPath = `/ayahs/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedAyah, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific Ayah by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ayahsRetrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('ayahsRetrieve', 'uuid', uuid)
            const localVarPath = `/ayahs/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Ayah record
         * @param {string} uuid 
         * @param {Ayah} ayah 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ayahsUpdate: async (uuid: string, ayah: Ayah, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('ayahsUpdate', 'uuid', uuid)
            // verify required parameter 'ayah' is not null or undefined
            assertParamExists('ayahsUpdate', 'ayah', ayah)
            const localVarPath = `/ayahs/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ayah, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AyahsApi - functional programming interface
 */
export const AyahsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AyahsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Ayah record
         * @param {AyahAdd} ayahAdd 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ayahsCreate(ayahAdd: AyahAdd, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AyahAdd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ayahsCreate(ayahAdd, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AyahsApi.ayahsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an Ayah record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ayahsDestroy(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ayahsDestroy(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AyahsApi.ayahsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all Ayahs (Quran verses)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {AyahsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [search] A search term.
         * @param {string} [surahUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ayahsList(limit?: number, offset?: number, ordering?: AyahsListOrderingEnum, search?: string, surahUuid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ayah>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ayahsList(limit, offset, ordering, search, surahUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AyahsApi.ayahsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Partially update an Ayah record
         * @param {string} uuid 
         * @param {PatchedAyah} [patchedAyah] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ayahsPartialUpdate(uuid: string, patchedAyah?: PatchedAyah, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ayah>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ayahsPartialUpdate(uuid, patchedAyah, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AyahsApi.ayahsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific Ayah by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ayahsRetrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AyahSerializerView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ayahsRetrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AyahsApi.ayahsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing Ayah record
         * @param {string} uuid 
         * @param {Ayah} ayah 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ayahsUpdate(uuid: string, ayah: Ayah, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ayah>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ayahsUpdate(uuid, ayah, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AyahsApi.ayahsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AyahsApi - factory interface
 */
export const AyahsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AyahsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Ayah record
         * @param {AyahAdd} ayahAdd 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ayahsCreate(ayahAdd: AyahAdd, options?: RawAxiosRequestConfig): AxiosPromise<AyahAdd> {
            return localVarFp.ayahsCreate(ayahAdd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an Ayah record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ayahsDestroy(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ayahsDestroy(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Ayahs (Quran verses)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {AyahsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [search] A search term.
         * @param {string} [surahUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ayahsList(limit?: number, offset?: number, ordering?: AyahsListOrderingEnum, search?: string, surahUuid?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Ayah>> {
            return localVarFp.ayahsList(limit, offset, ordering, search, surahUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Partially update an Ayah record
         * @param {string} uuid 
         * @param {PatchedAyah} [patchedAyah] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ayahsPartialUpdate(uuid: string, patchedAyah?: PatchedAyah, options?: RawAxiosRequestConfig): AxiosPromise<Ayah> {
            return localVarFp.ayahsPartialUpdate(uuid, patchedAyah, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific Ayah by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ayahsRetrieve(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<AyahSerializerView> {
            return localVarFp.ayahsRetrieve(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Ayah record
         * @param {string} uuid 
         * @param {Ayah} ayah 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ayahsUpdate(uuid: string, ayah: Ayah, options?: RawAxiosRequestConfig): AxiosPromise<Ayah> {
            return localVarFp.ayahsUpdate(uuid, ayah, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AyahsApi - object-oriented interface
 */
export class AyahsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Ayah record
     * @param {AyahAdd} ayahAdd 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ayahsCreate(ayahAdd: AyahAdd, options?: RawAxiosRequestConfig) {
        return AyahsApiFp(this.configuration).ayahsCreate(ayahAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an Ayah record
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ayahsDestroy(uuid: string, options?: RawAxiosRequestConfig) {
        return AyahsApiFp(this.configuration).ayahsDestroy(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Ayahs (Quran verses)
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {AyahsListOrderingEnum} [ordering] Which field to use when ordering the results.
     * @param {string} [search] A search term.
     * @param {string} [surahUuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ayahsList(limit?: number, offset?: number, ordering?: AyahsListOrderingEnum, search?: string, surahUuid?: string, options?: RawAxiosRequestConfig) {
        return AyahsApiFp(this.configuration).ayahsList(limit, offset, ordering, search, surahUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Partially update an Ayah record
     * @param {string} uuid 
     * @param {PatchedAyah} [patchedAyah] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ayahsPartialUpdate(uuid: string, patchedAyah?: PatchedAyah, options?: RawAxiosRequestConfig) {
        return AyahsApiFp(this.configuration).ayahsPartialUpdate(uuid, patchedAyah, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific Ayah by UUID
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ayahsRetrieve(uuid: string, options?: RawAxiosRequestConfig) {
        return AyahsApiFp(this.configuration).ayahsRetrieve(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Ayah record
     * @param {string} uuid 
     * @param {Ayah} ayah 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ayahsUpdate(uuid: string, ayah: Ayah, options?: RawAxiosRequestConfig) {
        return AyahsApiFp(this.configuration).ayahsUpdate(uuid, ayah, options).then((request) => request(this.axios, this.basePath));
    }
}

export const AyahsListOrderingEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type AyahsListOrderingEnum = typeof AyahsListOrderingEnum[keyof typeof AyahsListOrderingEnum];
