/* tslint:disable */
/* eslint-disable */
/**
 * Natiq API
 * Natiq Quran API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Mushaf } from '../models';
// @ts-ignore
import type { PatchedMushaf } from '../models';
/**
 * MushafsApi - axios parameter creator
 */
export const MushafsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Mushaf record
         * @param {Mushaf} mushaf 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsCreate: async (mushaf: Mushaf, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mushaf' is not null or undefined
            assertParamExists('mushafsCreate', 'mushaf', mushaf)
            const localVarPath = `/mushafs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mushaf, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Mushaf record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsDestroy: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('mushafsDestroy', 'uuid', uuid)
            const localVarPath = `/mushafs/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import a Mushaf from a JSON file upload
         * @param {File} file JSON file containing the Mushaf data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsImportCreate: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('mushafsImportCreate', 'file', file)
            const localVarPath = `/mushafs/import/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Mushafs (Quranic manuscripts/editions)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {MushafsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsList: async (limit?: number, offset?: number, ordering?: MushafsListOrderingEnum, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mushafs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partially update a Mushaf record
         * @param {string} uuid 
         * @param {PatchedMushaf} [patchedMushaf] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsPartialUpdate: async (uuid: string, patchedMushaf?: PatchedMushaf, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('mushafsPartialUpdate', 'uuid', uuid)
            const localVarPath = `/mushafs/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMushaf, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific Mushaf by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsRetrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('mushafsRetrieve', 'uuid', uuid)
            const localVarPath = `/mushafs/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Mushaf record
         * @param {string} uuid 
         * @param {Mushaf} mushaf 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsUpdate: async (uuid: string, mushaf: Mushaf, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('mushafsUpdate', 'uuid', uuid)
            // verify required parameter 'mushaf' is not null or undefined
            assertParamExists('mushafsUpdate', 'mushaf', mushaf)
            const localVarPath = `/mushafs/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mushaf, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MushafsApi - functional programming interface
 */
export const MushafsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MushafsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Mushaf record
         * @param {Mushaf} mushaf 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mushafsCreate(mushaf: Mushaf, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mushaf>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mushafsCreate(mushaf, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MushafsApi.mushafsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Mushaf record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mushafsDestroy(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mushafsDestroy(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MushafsApi.mushafsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Import a Mushaf from a JSON file upload
         * @param {File} file JSON file containing the Mushaf data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mushafsImportCreate(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mushaf>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mushafsImportCreate(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MushafsApi.mushafsImportCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all Mushafs (Quranic manuscripts/editions)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {MushafsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mushafsList(limit?: number, offset?: number, ordering?: MushafsListOrderingEnum, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Mushaf>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mushafsList(limit, offset, ordering, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MushafsApi.mushafsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Partially update a Mushaf record
         * @param {string} uuid 
         * @param {PatchedMushaf} [patchedMushaf] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mushafsPartialUpdate(uuid: string, patchedMushaf?: PatchedMushaf, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mushaf>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mushafsPartialUpdate(uuid, patchedMushaf, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MushafsApi.mushafsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific Mushaf by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mushafsRetrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mushaf>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mushafsRetrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MushafsApi.mushafsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing Mushaf record
         * @param {string} uuid 
         * @param {Mushaf} mushaf 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mushafsUpdate(uuid: string, mushaf: Mushaf, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mushaf>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mushafsUpdate(uuid, mushaf, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MushafsApi.mushafsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MushafsApi - factory interface
 */
export const MushafsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MushafsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Mushaf record
         * @param {MushafsApiMushafsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsCreate(requestParameters: MushafsApiMushafsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Mushaf> {
            return localVarFp.mushafsCreate(requestParameters.mushaf, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Mushaf record
         * @param {MushafsApiMushafsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsDestroy(requestParameters: MushafsApiMushafsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.mushafsDestroy(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import a Mushaf from a JSON file upload
         * @param {MushafsApiMushafsImportCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsImportCreate(requestParameters: MushafsApiMushafsImportCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Mushaf> {
            return localVarFp.mushafsImportCreate(requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Mushafs (Quranic manuscripts/editions)
         * @param {MushafsApiMushafsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsList(requestParameters: MushafsApiMushafsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Mushaf>> {
            return localVarFp.mushafsList(requestParameters.limit, requestParameters.offset, requestParameters.ordering, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Partially update a Mushaf record
         * @param {MushafsApiMushafsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsPartialUpdate(requestParameters: MushafsApiMushafsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Mushaf> {
            return localVarFp.mushafsPartialUpdate(requestParameters.uuid, requestParameters.patchedMushaf, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific Mushaf by UUID
         * @param {MushafsApiMushafsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsRetrieve(requestParameters: MushafsApiMushafsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Mushaf> {
            return localVarFp.mushafsRetrieve(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Mushaf record
         * @param {MushafsApiMushafsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mushafsUpdate(requestParameters: MushafsApiMushafsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Mushaf> {
            return localVarFp.mushafsUpdate(requestParameters.uuid, requestParameters.mushaf, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mushafsCreate operation in MushafsApi.
 */
export interface MushafsApiMushafsCreateRequest {
    readonly mushaf: Mushaf
}

/**
 * Request parameters for mushafsDestroy operation in MushafsApi.
 */
export interface MushafsApiMushafsDestroyRequest {
    readonly uuid: string
}

/**
 * Request parameters for mushafsImportCreate operation in MushafsApi.
 */
export interface MushafsApiMushafsImportCreateRequest {
    /**
     * JSON file containing the Mushaf data
     */
    readonly file: File
}

/**
 * Request parameters for mushafsList operation in MushafsApi.
 */
export interface MushafsApiMushafsListRequest {
    /**
     * Number of results to return per page.
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     */
    readonly offset?: number

    /**
     * Which field to use when ordering the results.
     */
    readonly ordering?: MushafsListOrderingEnum

    /**
     * A search term.
     */
    readonly search?: string
}

/**
 * Request parameters for mushafsPartialUpdate operation in MushafsApi.
 */
export interface MushafsApiMushafsPartialUpdateRequest {
    readonly uuid: string

    readonly patchedMushaf?: PatchedMushaf
}

/**
 * Request parameters for mushafsRetrieve operation in MushafsApi.
 */
export interface MushafsApiMushafsRetrieveRequest {
    readonly uuid: string
}

/**
 * Request parameters for mushafsUpdate operation in MushafsApi.
 */
export interface MushafsApiMushafsUpdateRequest {
    readonly uuid: string

    readonly mushaf: Mushaf
}

/**
 * MushafsApi - object-oriented interface
 */
export class MushafsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Mushaf record
     * @param {MushafsApiMushafsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public mushafsCreate(requestParameters: MushafsApiMushafsCreateRequest, options?: RawAxiosRequestConfig) {
        return MushafsApiFp(this.configuration).mushafsCreate(requestParameters.mushaf, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Mushaf record
     * @param {MushafsApiMushafsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public mushafsDestroy(requestParameters: MushafsApiMushafsDestroyRequest, options?: RawAxiosRequestConfig) {
        return MushafsApiFp(this.configuration).mushafsDestroy(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import a Mushaf from a JSON file upload
     * @param {MushafsApiMushafsImportCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public mushafsImportCreate(requestParameters: MushafsApiMushafsImportCreateRequest, options?: RawAxiosRequestConfig) {
        return MushafsApiFp(this.configuration).mushafsImportCreate(requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Mushafs (Quranic manuscripts/editions)
     * @param {MushafsApiMushafsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public mushafsList(requestParameters: MushafsApiMushafsListRequest = {}, options?: RawAxiosRequestConfig) {
        return MushafsApiFp(this.configuration).mushafsList(requestParameters.limit, requestParameters.offset, requestParameters.ordering, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Partially update a Mushaf record
     * @param {MushafsApiMushafsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public mushafsPartialUpdate(requestParameters: MushafsApiMushafsPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return MushafsApiFp(this.configuration).mushafsPartialUpdate(requestParameters.uuid, requestParameters.patchedMushaf, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific Mushaf by UUID
     * @param {MushafsApiMushafsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public mushafsRetrieve(requestParameters: MushafsApiMushafsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return MushafsApiFp(this.configuration).mushafsRetrieve(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Mushaf record
     * @param {MushafsApiMushafsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public mushafsUpdate(requestParameters: MushafsApiMushafsUpdateRequest, options?: RawAxiosRequestConfig) {
        return MushafsApiFp(this.configuration).mushafsUpdate(requestParameters.uuid, requestParameters.mushaf, options).then((request) => request(this.axios, this.basePath));
    }
}

export const MushafsListOrderingEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MushafsListOrderingEnum = typeof MushafsListOrderingEnum[keyof typeof MushafsListOrderingEnum];
