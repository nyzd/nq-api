/* tslint:disable */
/* eslint-disable */
/**
 * Natiq API
 * Natiq Quran API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Notification } from '../models';
// @ts-ignore
import type { PatchedNotification } from '../models';
/**
 * NotificationsApi - axios parameter creator
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new notification
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsCreate: async (notification: Notification, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notification' is not null or undefined
            assertParamExists('notificationsCreate', 'notification', notification)
            const localVarPath = `/notifications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a notification
         * @param {number} id A unique integer value identifying this notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationsDestroy', 'id', id)
            const localVarPath = `/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all notifications
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsList: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of the current user\'s notifications. Marks notifications in the current page as \'got_notification\' if not already marked.
         * @summary Get the current user\'s notifications (paginated)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsMeList: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a specific notification as \'opened_notification\' using its uuid (provided as a query parameter).
         * @summary Mark a notification as opened
         * @param {string} uuid UUID of the notification to mark as opened.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsOpenedRetrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('notificationsOpenedRetrieve', 'uuid', uuid)
            const localVarPath = `/notifications/opened/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partially update a notification
         * @param {number} id A unique integer value identifying this notification.
         * @param {PatchedNotification} [patchedNotification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsPartialUpdate: async (id: number, patchedNotification?: PatchedNotification, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationsPartialUpdate', 'id', id)
            const localVarPath = `/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedNotification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific notification by UUID
         * @param {number} id A unique integer value identifying this notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationsRetrieve', 'id', id)
            const localVarPath = `/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing notification
         * @param {number} id A unique integer value identifying this notification.
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsUpdate: async (id: number, notification: Notification, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationsUpdate', 'id', id)
            // verify required parameter 'notification' is not null or undefined
            assertParamExists('notificationsUpdate', 'notification', notification)
            const localVarPath = `/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks all notifications with status \'got_notification\' as \'viewed_notification\' for the current user.
         * @summary Mark notifications as viewed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsViewedRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/viewed/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new notification
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsCreate(notification: Notification, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsCreate(notification, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.notificationsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a notification
         * @param {number} id A unique integer value identifying this notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.notificationsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all notifications
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsList(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Notification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsList(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.notificationsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a paginated list of the current user\'s notifications. Marks notifications in the current page as \'got_notification\' if not already marked.
         * @summary Get the current user\'s notifications (paginated)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsMeList(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Notification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsMeList(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.notificationsMeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Marks a specific notification as \'opened_notification\' using its uuid (provided as a query parameter).
         * @summary Mark a notification as opened
         * @param {string} uuid UUID of the notification to mark as opened.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsOpenedRetrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsOpenedRetrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.notificationsOpenedRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Partially update a notification
         * @param {number} id A unique integer value identifying this notification.
         * @param {PatchedNotification} [patchedNotification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsPartialUpdate(id: number, patchedNotification?: PatchedNotification, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsPartialUpdate(id, patchedNotification, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.notificationsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific notification by UUID
         * @param {number} id A unique integer value identifying this notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.notificationsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing notification
         * @param {number} id A unique integer value identifying this notification.
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsUpdate(id: number, notification: Notification, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsUpdate(id, notification, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.notificationsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Marks all notifications with status \'got_notification\' as \'viewed_notification\' for the current user.
         * @summary Mark notifications as viewed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsViewedRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsViewedRetrieve(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.notificationsViewedRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotificationsApi - factory interface
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new notification
         * @param {NotificationsApiNotificationsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsCreate(requestParameters: NotificationsApiNotificationsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Notification> {
            return localVarFp.notificationsCreate(requestParameters.notification, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a notification
         * @param {NotificationsApiNotificationsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsDestroy(requestParameters: NotificationsApiNotificationsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all notifications
         * @param {NotificationsApiNotificationsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsList(requestParameters: NotificationsApiNotificationsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Notification>> {
            return localVarFp.notificationsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of the current user\'s notifications. Marks notifications in the current page as \'got_notification\' if not already marked.
         * @summary Get the current user\'s notifications (paginated)
         * @param {NotificationsApiNotificationsMeListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsMeList(requestParameters: NotificationsApiNotificationsMeListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Notification>> {
            return localVarFp.notificationsMeList(requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks a specific notification as \'opened_notification\' using its uuid (provided as a query parameter).
         * @summary Mark a notification as opened
         * @param {NotificationsApiNotificationsOpenedRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsOpenedRetrieve(requestParameters: NotificationsApiNotificationsOpenedRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.notificationsOpenedRetrieve(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Partially update a notification
         * @param {NotificationsApiNotificationsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsPartialUpdate(requestParameters: NotificationsApiNotificationsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Notification> {
            return localVarFp.notificationsPartialUpdate(requestParameters.id, requestParameters.patchedNotification, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific notification by UUID
         * @param {NotificationsApiNotificationsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRetrieve(requestParameters: NotificationsApiNotificationsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Notification> {
            return localVarFp.notificationsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing notification
         * @param {NotificationsApiNotificationsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsUpdate(requestParameters: NotificationsApiNotificationsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Notification> {
            return localVarFp.notificationsUpdate(requestParameters.id, requestParameters.notification, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks all notifications with status \'got_notification\' as \'viewed_notification\' for the current user.
         * @summary Mark notifications as viewed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsViewedRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.notificationsViewedRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for notificationsCreate operation in NotificationsApi.
 */
export interface NotificationsApiNotificationsCreateRequest {
    readonly notification: Notification
}

/**
 * Request parameters for notificationsDestroy operation in NotificationsApi.
 */
export interface NotificationsApiNotificationsDestroyRequest {
    /**
     * A unique integer value identifying this notification.
     */
    readonly id: number
}

/**
 * Request parameters for notificationsList operation in NotificationsApi.
 */
export interface NotificationsApiNotificationsListRequest {
    /**
     * Number of results to return per page.
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     */
    readonly offset?: number
}

/**
 * Request parameters for notificationsMeList operation in NotificationsApi.
 */
export interface NotificationsApiNotificationsMeListRequest {
    /**
     * Number of results to return per page.
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     */
    readonly offset?: number
}

/**
 * Request parameters for notificationsOpenedRetrieve operation in NotificationsApi.
 */
export interface NotificationsApiNotificationsOpenedRetrieveRequest {
    /**
     * UUID of the notification to mark as opened.
     */
    readonly uuid: string
}

/**
 * Request parameters for notificationsPartialUpdate operation in NotificationsApi.
 */
export interface NotificationsApiNotificationsPartialUpdateRequest {
    /**
     * A unique integer value identifying this notification.
     */
    readonly id: number

    readonly patchedNotification?: PatchedNotification
}

/**
 * Request parameters for notificationsRetrieve operation in NotificationsApi.
 */
export interface NotificationsApiNotificationsRetrieveRequest {
    /**
     * A unique integer value identifying this notification.
     */
    readonly id: number
}

/**
 * Request parameters for notificationsUpdate operation in NotificationsApi.
 */
export interface NotificationsApiNotificationsUpdateRequest {
    /**
     * A unique integer value identifying this notification.
     */
    readonly id: number

    readonly notification: Notification
}

/**
 * NotificationsApi - object-oriented interface
 */
export class NotificationsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new notification
     * @param {NotificationsApiNotificationsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsCreate(requestParameters: NotificationsApiNotificationsCreateRequest, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).notificationsCreate(requestParameters.notification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a notification
     * @param {NotificationsApiNotificationsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsDestroy(requestParameters: NotificationsApiNotificationsDestroyRequest, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).notificationsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all notifications
     * @param {NotificationsApiNotificationsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsList(requestParameters: NotificationsApiNotificationsListRequest = {}, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).notificationsList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of the current user\'s notifications. Marks notifications in the current page as \'got_notification\' if not already marked.
     * @summary Get the current user\'s notifications (paginated)
     * @param {NotificationsApiNotificationsMeListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsMeList(requestParameters: NotificationsApiNotificationsMeListRequest = {}, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).notificationsMeList(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a specific notification as \'opened_notification\' using its uuid (provided as a query parameter).
     * @summary Mark a notification as opened
     * @param {NotificationsApiNotificationsOpenedRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsOpenedRetrieve(requestParameters: NotificationsApiNotificationsOpenedRetrieveRequest, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).notificationsOpenedRetrieve(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Partially update a notification
     * @param {NotificationsApiNotificationsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsPartialUpdate(requestParameters: NotificationsApiNotificationsPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).notificationsPartialUpdate(requestParameters.id, requestParameters.patchedNotification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific notification by UUID
     * @param {NotificationsApiNotificationsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsRetrieve(requestParameters: NotificationsApiNotificationsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).notificationsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing notification
     * @param {NotificationsApiNotificationsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsUpdate(requestParameters: NotificationsApiNotificationsUpdateRequest, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).notificationsUpdate(requestParameters.id, requestParameters.notification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks all notifications with status \'got_notification\' as \'viewed_notification\' for the current user.
     * @summary Mark notifications as viewed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsViewedRetrieve(options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).notificationsViewedRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}

