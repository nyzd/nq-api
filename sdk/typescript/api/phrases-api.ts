/* tslint:disable */
/* eslint-disable */
/**
 * Natiq API
 * Natiq Quran API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PatchedPhrase } from '../models';
// @ts-ignore
import type { Phrase } from '../models';
// @ts-ignore
import type { PhraseModify } from '../models';
/**
 * PhrasesApi - axios parameter creator
 */
export const PhrasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new phrase
         * @param {Phrase} phrase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesCreate: async (phrase: Phrase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phrase' is not null or undefined
            assertParamExists('phrasesCreate', 'phrase', phrase)
            const localVarPath = `/phrases/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phrase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a phrase
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesDestroy: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('phrasesDestroy', 'uuid', uuid)
            const localVarPath = `/phrases/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all phrases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/phrases/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify phrase translations for a given language. The \'language\' query parameter is required.
         * @summary Modify phrase translations
         * @param {string} language Language code for the translation (required).
         * @param {PhraseModify} phraseModify 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesModifyCreate: async (language: string, phraseModify: PhraseModify, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('phrasesModifyCreate', 'language', language)
            // verify required parameter 'phraseModify' is not null or undefined
            assertParamExists('phrasesModifyCreate', 'phraseModify', phraseModify)
            const localVarPath = `/phrases/modify/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phraseModify, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partially update a phrase
         * @param {string} uuid 
         * @param {PatchedPhrase} [patchedPhrase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesPartialUpdate: async (uuid: string, patchedPhrase?: PatchedPhrase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('phrasesPartialUpdate', 'uuid', uuid)
            const localVarPath = `/phrases/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPhrase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific phrase by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesRetrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('phrasesRetrieve', 'uuid', uuid)
            const localVarPath = `/phrases/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing phrase
         * @param {string} uuid 
         * @param {Phrase} phrase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesUpdate: async (uuid: string, phrase: Phrase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('phrasesUpdate', 'uuid', uuid)
            // verify required parameter 'phrase' is not null or undefined
            assertParamExists('phrasesUpdate', 'phrase', phrase)
            const localVarPath = `/phrases/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phrase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhrasesApi - functional programming interface
 */
export const PhrasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhrasesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new phrase
         * @param {Phrase} phrase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phrasesCreate(phrase: Phrase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Phrase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phrasesCreate(phrase, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhrasesApi.phrasesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a phrase
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phrasesDestroy(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phrasesDestroy(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhrasesApi.phrasesDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all phrases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phrasesList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Phrase>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phrasesList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhrasesApi.phrasesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Modify phrase translations for a given language. The \'language\' query parameter is required.
         * @summary Modify phrase translations
         * @param {string} language Language code for the translation (required).
         * @param {PhraseModify} phraseModify 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phrasesModifyCreate(language: string, phraseModify: PhraseModify, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhraseModify>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phrasesModifyCreate(language, phraseModify, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhrasesApi.phrasesModifyCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Partially update a phrase
         * @param {string} uuid 
         * @param {PatchedPhrase} [patchedPhrase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phrasesPartialUpdate(uuid: string, patchedPhrase?: PatchedPhrase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Phrase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phrasesPartialUpdate(uuid, patchedPhrase, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhrasesApi.phrasesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific phrase by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phrasesRetrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Phrase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phrasesRetrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhrasesApi.phrasesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing phrase
         * @param {string} uuid 
         * @param {Phrase} phrase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phrasesUpdate(uuid: string, phrase: Phrase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Phrase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phrasesUpdate(uuid, phrase, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhrasesApi.phrasesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PhrasesApi - factory interface
 */
export const PhrasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhrasesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new phrase
         * @param {Phrase} phrase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesCreate(phrase: Phrase, options?: RawAxiosRequestConfig): AxiosPromise<Phrase> {
            return localVarFp.phrasesCreate(phrase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a phrase
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesDestroy(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.phrasesDestroy(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all phrases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Phrase>> {
            return localVarFp.phrasesList(options).then((request) => request(axios, basePath));
        },
        /**
         * Modify phrase translations for a given language. The \'language\' query parameter is required.
         * @summary Modify phrase translations
         * @param {string} language Language code for the translation (required).
         * @param {PhraseModify} phraseModify 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesModifyCreate(language: string, phraseModify: PhraseModify, options?: RawAxiosRequestConfig): AxiosPromise<PhraseModify> {
            return localVarFp.phrasesModifyCreate(language, phraseModify, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Partially update a phrase
         * @param {string} uuid 
         * @param {PatchedPhrase} [patchedPhrase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesPartialUpdate(uuid: string, patchedPhrase?: PatchedPhrase, options?: RawAxiosRequestConfig): AxiosPromise<Phrase> {
            return localVarFp.phrasesPartialUpdate(uuid, patchedPhrase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific phrase by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesRetrieve(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Phrase> {
            return localVarFp.phrasesRetrieve(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing phrase
         * @param {string} uuid 
         * @param {Phrase} phrase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phrasesUpdate(uuid: string, phrase: Phrase, options?: RawAxiosRequestConfig): AxiosPromise<Phrase> {
            return localVarFp.phrasesUpdate(uuid, phrase, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhrasesApi - object-oriented interface
 */
export class PhrasesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new phrase
     * @param {Phrase} phrase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public phrasesCreate(phrase: Phrase, options?: RawAxiosRequestConfig) {
        return PhrasesApiFp(this.configuration).phrasesCreate(phrase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a phrase
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public phrasesDestroy(uuid: string, options?: RawAxiosRequestConfig) {
        return PhrasesApiFp(this.configuration).phrasesDestroy(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all phrases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public phrasesList(options?: RawAxiosRequestConfig) {
        return PhrasesApiFp(this.configuration).phrasesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify phrase translations for a given language. The \'language\' query parameter is required.
     * @summary Modify phrase translations
     * @param {string} language Language code for the translation (required).
     * @param {PhraseModify} phraseModify 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public phrasesModifyCreate(language: string, phraseModify: PhraseModify, options?: RawAxiosRequestConfig) {
        return PhrasesApiFp(this.configuration).phrasesModifyCreate(language, phraseModify, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Partially update a phrase
     * @param {string} uuid 
     * @param {PatchedPhrase} [patchedPhrase] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public phrasesPartialUpdate(uuid: string, patchedPhrase?: PatchedPhrase, options?: RawAxiosRequestConfig) {
        return PhrasesApiFp(this.configuration).phrasesPartialUpdate(uuid, patchedPhrase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific phrase by UUID
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public phrasesRetrieve(uuid: string, options?: RawAxiosRequestConfig) {
        return PhrasesApiFp(this.configuration).phrasesRetrieve(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing phrase
     * @param {string} uuid 
     * @param {Phrase} phrase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public phrasesUpdate(uuid: string, phrase: Phrase, options?: RawAxiosRequestConfig) {
        return PhrasesApiFp(this.configuration).phrasesUpdate(uuid, phrase, options).then((request) => request(this.axios, this.basePath));
    }
}

