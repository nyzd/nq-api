/* tslint:disable */
/* eslint-disable */
/**
 * Natiq API
 * Natiq Quran API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Profile } from '../models';
/**
 * ProfileApi - axios parameter creator
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * GET: Retrieve the current user\'s profile. POST: Update the current user\'s profile information.
         * @summary Get or update the current user\'s profile
         * @param {Profile} profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileMeCreate: async (profile: Profile, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profile' is not null or undefined
            assertParamExists('profileMeCreate', 'profile', profile)
            const localVarPath = `/profile/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profile, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GET: Retrieve the current user\'s profile. POST: Update the current user\'s profile information.
         * @summary Get or update the current user\'s profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileMeRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the user\'s profile by uuid
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileRetrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('profileRetrieve', 'uuid', uuid)
            const localVarPath = `/profile/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * GET: Retrieve the current user\'s profile. POST: Update the current user\'s profile information.
         * @summary Get or update the current user\'s profile
         * @param {Profile} profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profileMeCreate(profile: Profile, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profileMeCreate(profile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.profileMeCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * GET: Retrieve the current user\'s profile. POST: Update the current user\'s profile information.
         * @summary Get or update the current user\'s profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profileMeRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profileMeRetrieve(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.profileMeRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the user\'s profile by uuid
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profileRetrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profileRetrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.profileRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProfileApi - factory interface
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * GET: Retrieve the current user\'s profile. POST: Update the current user\'s profile information.
         * @summary Get or update the current user\'s profile
         * @param {ProfileApiProfileMeCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileMeCreate(requestParameters: ProfileApiProfileMeCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Profile> {
            return localVarFp.profileMeCreate(requestParameters.profile, options).then((request) => request(axios, basePath));
        },
        /**
         * GET: Retrieve the current user\'s profile. POST: Update the current user\'s profile information.
         * @summary Get or update the current user\'s profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileMeRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<Profile> {
            return localVarFp.profileMeRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the user\'s profile by uuid
         * @param {ProfileApiProfileRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileRetrieve(requestParameters: ProfileApiProfileRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Profile> {
            return localVarFp.profileRetrieve(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for profileMeCreate operation in ProfileApi.
 */
export interface ProfileApiProfileMeCreateRequest {
    readonly profile: Profile
}

/**
 * Request parameters for profileRetrieve operation in ProfileApi.
 */
export interface ProfileApiProfileRetrieveRequest {
    readonly uuid: string
}

/**
 * ProfileApi - object-oriented interface
 */
export class ProfileApi extends BaseAPI {
    /**
     * GET: Retrieve the current user\'s profile. POST: Update the current user\'s profile information.
     * @summary Get or update the current user\'s profile
     * @param {ProfileApiProfileMeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public profileMeCreate(requestParameters: ProfileApiProfileMeCreateRequest, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).profileMeCreate(requestParameters.profile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GET: Retrieve the current user\'s profile. POST: Update the current user\'s profile information.
     * @summary Get or update the current user\'s profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public profileMeRetrieve(options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).profileMeRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the user\'s profile by uuid
     * @param {ProfileApiProfileRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public profileRetrieve(requestParameters: ProfileApiProfileRetrieveRequest, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).profileRetrieve(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }
}

