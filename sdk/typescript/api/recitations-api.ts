/* tslint:disable */
/* eslint-disable */
/**
 * Natiq API
 * Natiq Quran API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PatchedRecitation } from '../models';
// @ts-ignore
import type { Recitation } from '../models';
// @ts-ignore
import type { RecitationList } from '../models';
/**
 * RecitationsApi - axios parameter creator
 */
export const RecitationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Recitation record
         * @param {Recitation} recitation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsCreate: async (recitation: Recitation, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recitation' is not null or undefined
            assertParamExists('recitationsCreate', 'recitation', recitation)
            const localVarPath = `/recitations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recitation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Recitation record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsDestroy: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('recitationsDestroy', 'uuid', uuid)
            const localVarPath = `/recitations/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Recitations (audio recordings)
         * @param {RecitationsListMushafEnum} mushaf Short name of the Mushaf to filter Recitations by. Common value: \&#39;hafs\&#39;. Any string is accepted. (e.g. \&#39;hafs\&#39;, \&#39;warsh\&#39;, etc.)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {RecitationsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [reciterUuid] UUID of the Reciter to filter Recitations by.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsList: async (mushaf: RecitationsListMushafEnum, limit?: number, offset?: number, ordering?: RecitationsListOrderingEnum, reciterUuid?: string, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mushaf' is not null or undefined
            assertParamExists('recitationsList', 'mushaf', mushaf)
            const localVarPath = `/recitations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (mushaf !== undefined) {
                localVarQueryParameter['mushaf'] = mushaf;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (reciterUuid !== undefined) {
                localVarQueryParameter['reciter_uuid'] = reciterUuid;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partially update a Recitation record
         * @param {string} uuid 
         * @param {PatchedRecitation} [patchedRecitation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsPartialUpdate: async (uuid: string, patchedRecitation?: PatchedRecitation, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('recitationsPartialUpdate', 'uuid', uuid)
            const localVarPath = `/recitations/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedRecitation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific Recitation by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsRetrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('recitationsRetrieve', 'uuid', uuid)
            const localVarPath = `/recitations/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Recitation record
         * @param {string} uuid 
         * @param {Recitation} recitation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsUpdate: async (uuid: string, recitation: Recitation, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('recitationsUpdate', 'uuid', uuid)
            // verify required parameter 'recitation' is not null or undefined
            assertParamExists('recitationsUpdate', 'recitation', recitation)
            const localVarPath = `/recitations/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recitation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts a multipart/form-data request with parts: file (mp3) and optional word_timestamps JSON list.
         * @summary Upload a surah audio file and optional word-level timestamps for a Recitation
         * @param {string} surahUuid 
         * @param {string} uuid 
         * @param {File} file 
         * @param {string} [wordTimestamps] JSON list, optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsUploadCreate: async (surahUuid: string, uuid: string, file: File, wordTimestamps?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surahUuid' is not null or undefined
            assertParamExists('recitationsUploadCreate', 'surahUuid', surahUuid)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('recitationsUploadCreate', 'uuid', uuid)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('recitationsUploadCreate', 'file', file)
            const localVarPath = `/recitations/{uuid}/upload/{surah_uuid}/`
                .replace(`{${"surah_uuid"}}`, encodeURIComponent(String(surahUuid)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (wordTimestamps !== undefined) { 
                localVarFormParams.append('word_timestamps', wordTimestamps as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecitationsApi - functional programming interface
 */
export const RecitationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecitationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Recitation record
         * @param {Recitation} recitation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recitationsCreate(recitation: Recitation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Recitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recitationsCreate(recitation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecitationsApi.recitationsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Recitation record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recitationsDestroy(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recitationsDestroy(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecitationsApi.recitationsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all Recitations (audio recordings)
         * @param {RecitationsListMushafEnum} mushaf Short name of the Mushaf to filter Recitations by. Common value: \&#39;hafs\&#39;. Any string is accepted. (e.g. \&#39;hafs\&#39;, \&#39;warsh\&#39;, etc.)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {RecitationsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [reciterUuid] UUID of the Reciter to filter Recitations by.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recitationsList(mushaf: RecitationsListMushafEnum, limit?: number, offset?: number, ordering?: RecitationsListOrderingEnum, reciterUuid?: string, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecitationList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recitationsList(mushaf, limit, offset, ordering, reciterUuid, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecitationsApi.recitationsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Partially update a Recitation record
         * @param {string} uuid 
         * @param {PatchedRecitation} [patchedRecitation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recitationsPartialUpdate(uuid: string, patchedRecitation?: PatchedRecitation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Recitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recitationsPartialUpdate(uuid, patchedRecitation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecitationsApi.recitationsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific Recitation by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recitationsRetrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Recitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recitationsRetrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecitationsApi.recitationsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing Recitation record
         * @param {string} uuid 
         * @param {Recitation} recitation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recitationsUpdate(uuid: string, recitation: Recitation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Recitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recitationsUpdate(uuid, recitation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecitationsApi.recitationsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Accepts a multipart/form-data request with parts: file (mp3) and optional word_timestamps JSON list.
         * @summary Upload a surah audio file and optional word-level timestamps for a Recitation
         * @param {string} surahUuid 
         * @param {string} uuid 
         * @param {File} file 
         * @param {string} [wordTimestamps] JSON list, optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recitationsUploadCreate(surahUuid: string, uuid: string, file: File, wordTimestamps?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recitationsUploadCreate(surahUuid, uuid, file, wordTimestamps, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecitationsApi.recitationsUploadCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RecitationsApi - factory interface
 */
export const RecitationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecitationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Recitation record
         * @param {Recitation} recitation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsCreate(recitation: Recitation, options?: RawAxiosRequestConfig): AxiosPromise<Recitation> {
            return localVarFp.recitationsCreate(recitation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Recitation record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsDestroy(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.recitationsDestroy(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Recitations (audio recordings)
         * @param {RecitationsListMushafEnum} mushaf Short name of the Mushaf to filter Recitations by. Common value: \&#39;hafs\&#39;. Any string is accepted. (e.g. \&#39;hafs\&#39;, \&#39;warsh\&#39;, etc.)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {RecitationsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [reciterUuid] UUID of the Reciter to filter Recitations by.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsList(mushaf: RecitationsListMushafEnum, limit?: number, offset?: number, ordering?: RecitationsListOrderingEnum, reciterUuid?: string, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RecitationList>> {
            return localVarFp.recitationsList(mushaf, limit, offset, ordering, reciterUuid, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Partially update a Recitation record
         * @param {string} uuid 
         * @param {PatchedRecitation} [patchedRecitation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsPartialUpdate(uuid: string, patchedRecitation?: PatchedRecitation, options?: RawAxiosRequestConfig): AxiosPromise<Recitation> {
            return localVarFp.recitationsPartialUpdate(uuid, patchedRecitation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific Recitation by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsRetrieve(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Recitation> {
            return localVarFp.recitationsRetrieve(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Recitation record
         * @param {string} uuid 
         * @param {Recitation} recitation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsUpdate(uuid: string, recitation: Recitation, options?: RawAxiosRequestConfig): AxiosPromise<Recitation> {
            return localVarFp.recitationsUpdate(uuid, recitation, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts a multipart/form-data request with parts: file (mp3) and optional word_timestamps JSON list.
         * @summary Upload a surah audio file and optional word-level timestamps for a Recitation
         * @param {string} surahUuid 
         * @param {string} uuid 
         * @param {File} file 
         * @param {string} [wordTimestamps] JSON list, optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recitationsUploadCreate(surahUuid: string, uuid: string, file: File, wordTimestamps?: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.recitationsUploadCreate(surahUuid, uuid, file, wordTimestamps, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecitationsApi - object-oriented interface
 */
export class RecitationsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Recitation record
     * @param {Recitation} recitation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public recitationsCreate(recitation: Recitation, options?: RawAxiosRequestConfig) {
        return RecitationsApiFp(this.configuration).recitationsCreate(recitation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Recitation record
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public recitationsDestroy(uuid: string, options?: RawAxiosRequestConfig) {
        return RecitationsApiFp(this.configuration).recitationsDestroy(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Recitations (audio recordings)
     * @param {RecitationsListMushafEnum} mushaf Short name of the Mushaf to filter Recitations by. Common value: \&#39;hafs\&#39;. Any string is accepted. (e.g. \&#39;hafs\&#39;, \&#39;warsh\&#39;, etc.)
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {RecitationsListOrderingEnum} [ordering] Which field to use when ordering the results.
     * @param {string} [reciterUuid] UUID of the Reciter to filter Recitations by.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public recitationsList(mushaf: RecitationsListMushafEnum, limit?: number, offset?: number, ordering?: RecitationsListOrderingEnum, reciterUuid?: string, search?: string, options?: RawAxiosRequestConfig) {
        return RecitationsApiFp(this.configuration).recitationsList(mushaf, limit, offset, ordering, reciterUuid, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Partially update a Recitation record
     * @param {string} uuid 
     * @param {PatchedRecitation} [patchedRecitation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public recitationsPartialUpdate(uuid: string, patchedRecitation?: PatchedRecitation, options?: RawAxiosRequestConfig) {
        return RecitationsApiFp(this.configuration).recitationsPartialUpdate(uuid, patchedRecitation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific Recitation by UUID
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public recitationsRetrieve(uuid: string, options?: RawAxiosRequestConfig) {
        return RecitationsApiFp(this.configuration).recitationsRetrieve(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Recitation record
     * @param {string} uuid 
     * @param {Recitation} recitation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public recitationsUpdate(uuid: string, recitation: Recitation, options?: RawAxiosRequestConfig) {
        return RecitationsApiFp(this.configuration).recitationsUpdate(uuid, recitation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts a multipart/form-data request with parts: file (mp3) and optional word_timestamps JSON list.
     * @summary Upload a surah audio file and optional word-level timestamps for a Recitation
     * @param {string} surahUuid 
     * @param {string} uuid 
     * @param {File} file 
     * @param {string} [wordTimestamps] JSON list, optional
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public recitationsUploadCreate(surahUuid: string, uuid: string, file: File, wordTimestamps?: string, options?: RawAxiosRequestConfig) {
        return RecitationsApiFp(this.configuration).recitationsUploadCreate(surahUuid, uuid, file, wordTimestamps, options).then((request) => request(this.axios, this.basePath));
    }
}

export const RecitationsListMushafEnum = {
    Hafs: 'hafs'
} as const;
export type RecitationsListMushafEnum = typeof RecitationsListMushafEnum[keyof typeof RecitationsListMushafEnum];
export const RecitationsListOrderingEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type RecitationsListOrderingEnum = typeof RecitationsListOrderingEnum[keyof typeof RecitationsListOrderingEnum];
