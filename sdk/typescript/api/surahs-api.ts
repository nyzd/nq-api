/* tslint:disable */
/* eslint-disable */
/**
 * Natiq API
 * Natiq Quran API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PatchedSurah } from '../models';
// @ts-ignore
import type { Surah } from '../models';
// @ts-ignore
import type { SurahDetail } from '../models';
/**
 * SurahsApi - axios parameter creator
 */
export const SurahsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Surah record
         * @param {Surah} surah 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surahsCreate: async (surah: Surah, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surah' is not null or undefined
            assertParamExists('surahsCreate', 'surah', surah)
            const localVarPath = `/surahs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(surah, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Surah record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surahsDestroy: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('surahsDestroy', 'uuid', uuid)
            const localVarPath = `/surahs/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Surahs (Quran chapters)
         * @param {SurahsListMushafEnum} mushaf Short name of the Mushaf to filter Surahs by. Common value: \&#39;hafs\&#39;. Any string is accepted. (e.g. \&#39;hafs\&#39;, \&#39;warsh\&#39;, etc.)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {SurahsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surahsList: async (mushaf: SurahsListMushafEnum, limit?: number, offset?: number, ordering?: SurahsListOrderingEnum, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mushaf' is not null or undefined
            assertParamExists('surahsList', 'mushaf', mushaf)
            const localVarPath = `/surahs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (mushaf !== undefined) {
                localVarQueryParameter['mushaf'] = mushaf;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partially update a Surah record
         * @param {string} uuid 
         * @param {PatchedSurah} [patchedSurah] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surahsPartialUpdate: async (uuid: string, patchedSurah?: PatchedSurah, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('surahsPartialUpdate', 'uuid', uuid)
            const localVarPath = `/surahs/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedSurah, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific Surah by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surahsRetrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('surahsRetrieve', 'uuid', uuid)
            const localVarPath = `/surahs/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Surah record
         * @param {string} uuid 
         * @param {Surah} surah 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surahsUpdate: async (uuid: string, surah: Surah, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('surahsUpdate', 'uuid', uuid)
            // verify required parameter 'surah' is not null or undefined
            assertParamExists('surahsUpdate', 'surah', surah)
            const localVarPath = `/surahs/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(surah, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SurahsApi - functional programming interface
 */
export const SurahsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SurahsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Surah record
         * @param {Surah} surah 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surahsCreate(surah: Surah, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Surah>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surahsCreate(surah, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SurahsApi.surahsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Surah record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surahsDestroy(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surahsDestroy(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SurahsApi.surahsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all Surahs (Quran chapters)
         * @param {SurahsListMushafEnum} mushaf Short name of the Mushaf to filter Surahs by. Common value: \&#39;hafs\&#39;. Any string is accepted. (e.g. \&#39;hafs\&#39;, \&#39;warsh\&#39;, etc.)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {SurahsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surahsList(mushaf: SurahsListMushafEnum, limit?: number, offset?: number, ordering?: SurahsListOrderingEnum, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Surah>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surahsList(mushaf, limit, offset, ordering, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SurahsApi.surahsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Partially update a Surah record
         * @param {string} uuid 
         * @param {PatchedSurah} [patchedSurah] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surahsPartialUpdate(uuid: string, patchedSurah?: PatchedSurah, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Surah>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surahsPartialUpdate(uuid, patchedSurah, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SurahsApi.surahsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific Surah by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surahsRetrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurahDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surahsRetrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SurahsApi.surahsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing Surah record
         * @param {string} uuid 
         * @param {Surah} surah 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surahsUpdate(uuid: string, surah: Surah, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Surah>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surahsUpdate(uuid, surah, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SurahsApi.surahsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SurahsApi - factory interface
 */
export const SurahsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SurahsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Surah record
         * @param {Surah} surah 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surahsCreate(surah: Surah, options?: RawAxiosRequestConfig): AxiosPromise<Surah> {
            return localVarFp.surahsCreate(surah, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Surah record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surahsDestroy(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.surahsDestroy(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Surahs (Quran chapters)
         * @param {SurahsListMushafEnum} mushaf Short name of the Mushaf to filter Surahs by. Common value: \&#39;hafs\&#39;. Any string is accepted. (e.g. \&#39;hafs\&#39;, \&#39;warsh\&#39;, etc.)
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {SurahsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surahsList(mushaf: SurahsListMushafEnum, limit?: number, offset?: number, ordering?: SurahsListOrderingEnum, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Surah>> {
            return localVarFp.surahsList(mushaf, limit, offset, ordering, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Partially update a Surah record
         * @param {string} uuid 
         * @param {PatchedSurah} [patchedSurah] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surahsPartialUpdate(uuid: string, patchedSurah?: PatchedSurah, options?: RawAxiosRequestConfig): AxiosPromise<Surah> {
            return localVarFp.surahsPartialUpdate(uuid, patchedSurah, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific Surah by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surahsRetrieve(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<SurahDetail> {
            return localVarFp.surahsRetrieve(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Surah record
         * @param {string} uuid 
         * @param {Surah} surah 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surahsUpdate(uuid: string, surah: Surah, options?: RawAxiosRequestConfig): AxiosPromise<Surah> {
            return localVarFp.surahsUpdate(uuid, surah, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SurahsApi - object-oriented interface
 */
export class SurahsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Surah record
     * @param {Surah} surah 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public surahsCreate(surah: Surah, options?: RawAxiosRequestConfig) {
        return SurahsApiFp(this.configuration).surahsCreate(surah, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Surah record
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public surahsDestroy(uuid: string, options?: RawAxiosRequestConfig) {
        return SurahsApiFp(this.configuration).surahsDestroy(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Surahs (Quran chapters)
     * @param {SurahsListMushafEnum} mushaf Short name of the Mushaf to filter Surahs by. Common value: \&#39;hafs\&#39;. Any string is accepted. (e.g. \&#39;hafs\&#39;, \&#39;warsh\&#39;, etc.)
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {SurahsListOrderingEnum} [ordering] Which field to use when ordering the results.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public surahsList(mushaf: SurahsListMushafEnum, limit?: number, offset?: number, ordering?: SurahsListOrderingEnum, search?: string, options?: RawAxiosRequestConfig) {
        return SurahsApiFp(this.configuration).surahsList(mushaf, limit, offset, ordering, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Partially update a Surah record
     * @param {string} uuid 
     * @param {PatchedSurah} [patchedSurah] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public surahsPartialUpdate(uuid: string, patchedSurah?: PatchedSurah, options?: RawAxiosRequestConfig) {
        return SurahsApiFp(this.configuration).surahsPartialUpdate(uuid, patchedSurah, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific Surah by UUID
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public surahsRetrieve(uuid: string, options?: RawAxiosRequestConfig) {
        return SurahsApiFp(this.configuration).surahsRetrieve(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Surah record
     * @param {string} uuid 
     * @param {Surah} surah 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public surahsUpdate(uuid: string, surah: Surah, options?: RawAxiosRequestConfig) {
        return SurahsApiFp(this.configuration).surahsUpdate(uuid, surah, options).then((request) => request(this.axios, this.basePath));
    }
}

export const SurahsListMushafEnum = {
    Hafs: 'hafs'
} as const;
export type SurahsListMushafEnum = typeof SurahsListMushafEnum[keyof typeof SurahsListMushafEnum];
export const SurahsListOrderingEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type SurahsListOrderingEnum = typeof SurahsListOrderingEnum[keyof typeof SurahsListOrderingEnum];
