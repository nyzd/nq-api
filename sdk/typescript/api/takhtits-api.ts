/* tslint:disable */
/* eslint-disable */
/**
 * Natiq API
 * Natiq Quran API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AyahBreaker } from '../models';
// @ts-ignore
import type { AyahBreakersResponse } from '../models';
// @ts-ignore
import type { PatchedTakhtit } from '../models';
// @ts-ignore
import type { Takhtit } from '../models';
// @ts-ignore
import type { TakhtitsAyahsBreakersCreateRequest } from '../models';
// @ts-ignore
import type { TakhtitsCreateRequest } from '../models';
// @ts-ignore
import type { TakhtitsWordsBreakersCreateRequest } from '../models';
// @ts-ignore
import type { WordBreakerDetailResponse } from '../models';
// @ts-ignore
import type { WordBreakersResponse } from '../models';
/**
 * TakhtitsApi - axios parameter creator
 */
export const TakhtitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new ayahs_breaker to this takhtit. Requires ayah_uuid in the request body.
         * @summary Add an ayahs_breaker to this takhtit
         * @param {string} uuid 
         * @param {TakhtitsAyahsBreakersCreateRequest} [takhtitsAyahsBreakersCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsAyahsBreakersCreate: async (uuid: string, takhtitsAyahsBreakersCreateRequest?: TakhtitsAyahsBreakersCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('takhtitsAyahsBreakersCreate', 'uuid', uuid)
            const localVarPath = `/takhtits/{uuid}/ayahs_breakers/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(takhtitsAyahsBreakersCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a flat list containing an entry for every ayah in this takhtit, with breaker info similar to the mushaf ayah_map action.
         * @summary List all ayahs_breakers for this takhtit (ayahs map style)
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsAyahsBreakersList: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('takhtitsAyahsBreakersList', 'uuid', uuid)
            const localVarPath = `/takhtits/{uuid}/ayahs_breakers/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific ayahs_breaker for this takhtit
         * @param {string} breakerUuid UUID of the ayahs_breaker.
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsAyahsBreakersRetrieve: async (breakerUuid: string, uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'breakerUuid' is not null or undefined
            assertParamExists('takhtitsAyahsBreakersRetrieve', 'breakerUuid', breakerUuid)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('takhtitsAyahsBreakersRetrieve', 'uuid', uuid)
            const localVarPath = `/takhtits/{uuid}/ayahs_breakers/{breaker_uuid}/`
                .replace(`{${"breaker_uuid"}}`, encodeURIComponent(String(breakerUuid)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Takhtit. Requires mushaf_uuid and account_uuid in the request body.
         * @summary Create a new Takhtit record
         * @param {TakhtitsCreateRequest} [takhtitsCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsCreate: async (takhtitsCreateRequest?: TakhtitsCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/takhtits/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(takhtitsCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Takhtit record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsDestroy: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('takhtitsDestroy', 'uuid', uuid)
            const localVarPath = `/takhtits/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts a JSON array of strings with the format \'{surah}:{ayah}\' that denote the ayah at which a new breaker (page by default) begins. Existing breakers whose names start with the provided breaker type (default: \'page\') will be removed before importing the new ones.
         * @summary Import Ayah Breakers for the specified Takhtit
         * @param {string} uuid 
         * @param {File} file Text/JSON file containing a list of breakers (e.g. [\\\&#39;2:1\\\&#39;, \\\&#39;2:6\\\&#39;]).
         * @param {string} [type] Breaker type (e.g., page, juz, hizb, ruku). Defaults to \&#39;page\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsImportCreate: async (uuid: string, file: File, type?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('takhtitsImportCreate', 'uuid', uuid)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('takhtitsImportCreate', 'file', file)
            const localVarPath = `/takhtits/{uuid}/import/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Takhtits (text annotations/notes)
         * @param {TakhtitsListMushafEnum} [mushaf] Short name of the Mushaf to filter Takhtits by. Common value: \&#39;hafs\&#39;. Any string is accepted. (e.g. \&#39;hafs\&#39;, \&#39;warsh\&#39;, etc.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsList: async (mushaf?: TakhtitsListMushafEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/takhtits/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (mushaf !== undefined) {
                localVarQueryParameter['mushaf'] = mushaf;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partially update a Takhtit record
         * @param {string} uuid 
         * @param {PatchedTakhtit} [patchedTakhtit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsPartialUpdate: async (uuid: string, patchedTakhtit?: PatchedTakhtit, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('takhtitsPartialUpdate', 'uuid', uuid)
            const localVarPath = `/takhtits/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedTakhtit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific Takhtit by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsRetrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('takhtitsRetrieve', 'uuid', uuid)
            const localVarPath = `/takhtits/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Takhtit record
         * @param {string} uuid 
         * @param {Takhtit} takhtit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsUpdate: async (uuid: string, takhtit: Takhtit, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('takhtitsUpdate', 'uuid', uuid)
            // verify required parameter 'takhtit' is not null or undefined
            assertParamExists('takhtitsUpdate', 'takhtit', takhtit)
            const localVarPath = `/takhtits/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(takhtit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new words_breaker to this takhtit. Requires word_uuid in the request body. Only type \'line\' is allowed.
         * @summary Add a words_breaker to this takhtit
         * @param {string} uuid 
         * @param {TakhtitsWordsBreakersCreateRequest} [takhtitsWordsBreakersCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsWordsBreakersCreate: async (uuid: string, takhtitsWordsBreakersCreateRequest?: TakhtitsWordsBreakersCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('takhtitsWordsBreakersCreate', 'uuid', uuid)
            const localVarPath = `/takhtits/{uuid}/words_breakers/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(takhtitsWordsBreakersCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a flat list containing an entry for every word with a breaker for this takhtit, with a line counter (incremented for each breaker).
         * @summary List all words_breakers for this takhtit (with line counters)
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsWordsBreakersList: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('takhtitsWordsBreakersList', 'uuid', uuid)
            const localVarPath = `/takhtits/{uuid}/words_breakers/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific words_breaker for this takhtit
         * @param {string} breakerUuid UUID of the words_breaker.
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsWordsBreakersRetrieve: async (breakerUuid: string, uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'breakerUuid' is not null or undefined
            assertParamExists('takhtitsWordsBreakersRetrieve', 'breakerUuid', breakerUuid)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('takhtitsWordsBreakersRetrieve', 'uuid', uuid)
            const localVarPath = `/takhtits/{uuid}/words_breakers/{breaker_uuid}/`
                .replace(`{${"breaker_uuid"}}`, encodeURIComponent(String(breakerUuid)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TakhtitsApi - functional programming interface
 */
export const TakhtitsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TakhtitsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new ayahs_breaker to this takhtit. Requires ayah_uuid in the request body.
         * @summary Add an ayahs_breaker to this takhtit
         * @param {string} uuid 
         * @param {TakhtitsAyahsBreakersCreateRequest} [takhtitsAyahsBreakersCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsAyahsBreakersCreate(uuid: string, takhtitsAyahsBreakersCreateRequest?: TakhtitsAyahsBreakersCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AyahBreaker>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsAyahsBreakersCreate(uuid, takhtitsAyahsBreakersCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsAyahsBreakersCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a flat list containing an entry for every ayah in this takhtit, with breaker info similar to the mushaf ayah_map action.
         * @summary List all ayahs_breakers for this takhtit (ayahs map style)
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsAyahsBreakersList(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AyahBreakersResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsAyahsBreakersList(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsAyahsBreakersList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific ayahs_breaker for this takhtit
         * @param {string} breakerUuid UUID of the ayahs_breaker.
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsAyahsBreakersRetrieve(breakerUuid: string, uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AyahBreaker>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsAyahsBreakersRetrieve(breakerUuid, uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsAyahsBreakersRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new Takhtit. Requires mushaf_uuid and account_uuid in the request body.
         * @summary Create a new Takhtit record
         * @param {TakhtitsCreateRequest} [takhtitsCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsCreate(takhtitsCreateRequest?: TakhtitsCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Takhtit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsCreate(takhtitsCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Takhtit record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsDestroy(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsDestroy(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Accepts a JSON array of strings with the format \'{surah}:{ayah}\' that denote the ayah at which a new breaker (page by default) begins. Existing breakers whose names start with the provided breaker type (default: \'page\') will be removed before importing the new ones.
         * @summary Import Ayah Breakers for the specified Takhtit
         * @param {string} uuid 
         * @param {File} file Text/JSON file containing a list of breakers (e.g. [\\\&#39;2:1\\\&#39;, \\\&#39;2:6\\\&#39;]).
         * @param {string} [type] Breaker type (e.g., page, juz, hizb, ruku). Defaults to \&#39;page\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsImportCreate(uuid: string, file: File, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsImportCreate(uuid, file, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsImportCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all Takhtits (text annotations/notes)
         * @param {TakhtitsListMushafEnum} [mushaf] Short name of the Mushaf to filter Takhtits by. Common value: \&#39;hafs\&#39;. Any string is accepted. (e.g. \&#39;hafs\&#39;, \&#39;warsh\&#39;, etc.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsList(mushaf?: TakhtitsListMushafEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Takhtit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsList(mushaf, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Partially update a Takhtit record
         * @param {string} uuid 
         * @param {PatchedTakhtit} [patchedTakhtit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsPartialUpdate(uuid: string, patchedTakhtit?: PatchedTakhtit, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Takhtit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsPartialUpdate(uuid, patchedTakhtit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific Takhtit by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsRetrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Takhtit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsRetrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing Takhtit record
         * @param {string} uuid 
         * @param {Takhtit} takhtit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsUpdate(uuid: string, takhtit: Takhtit, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Takhtit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsUpdate(uuid, takhtit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a new words_breaker to this takhtit. Requires word_uuid in the request body. Only type \'line\' is allowed.
         * @summary Add a words_breaker to this takhtit
         * @param {string} uuid 
         * @param {TakhtitsWordsBreakersCreateRequest} [takhtitsWordsBreakersCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsWordsBreakersCreate(uuid: string, takhtitsWordsBreakersCreateRequest?: TakhtitsWordsBreakersCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordBreakerDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsWordsBreakersCreate(uuid, takhtitsWordsBreakersCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsWordsBreakersCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a flat list containing an entry for every word with a breaker for this takhtit, with a line counter (incremented for each breaker).
         * @summary List all words_breakers for this takhtit (with line counters)
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsWordsBreakersList(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WordBreakersResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsWordsBreakersList(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsWordsBreakersList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific words_breaker for this takhtit
         * @param {string} breakerUuid UUID of the words_breaker.
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takhtitsWordsBreakersRetrieve(breakerUuid: string, uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordBreakerDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takhtitsWordsBreakersRetrieve(breakerUuid, uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TakhtitsApi.takhtitsWordsBreakersRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TakhtitsApi - factory interface
 */
export const TakhtitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TakhtitsApiFp(configuration)
    return {
        /**
         * Add a new ayahs_breaker to this takhtit. Requires ayah_uuid in the request body.
         * @summary Add an ayahs_breaker to this takhtit
         * @param {string} uuid 
         * @param {TakhtitsAyahsBreakersCreateRequest} [takhtitsAyahsBreakersCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsAyahsBreakersCreate(uuid: string, takhtitsAyahsBreakersCreateRequest?: TakhtitsAyahsBreakersCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AyahBreaker> {
            return localVarFp.takhtitsAyahsBreakersCreate(uuid, takhtitsAyahsBreakersCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a flat list containing an entry for every ayah in this takhtit, with breaker info similar to the mushaf ayah_map action.
         * @summary List all ayahs_breakers for this takhtit (ayahs map style)
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsAyahsBreakersList(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<AyahBreakersResponse>> {
            return localVarFp.takhtitsAyahsBreakersList(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific ayahs_breaker for this takhtit
         * @param {string} breakerUuid UUID of the ayahs_breaker.
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsAyahsBreakersRetrieve(breakerUuid: string, uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<AyahBreaker> {
            return localVarFp.takhtitsAyahsBreakersRetrieve(breakerUuid, uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Takhtit. Requires mushaf_uuid and account_uuid in the request body.
         * @summary Create a new Takhtit record
         * @param {TakhtitsCreateRequest} [takhtitsCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsCreate(takhtitsCreateRequest?: TakhtitsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Takhtit> {
            return localVarFp.takhtitsCreate(takhtitsCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Takhtit record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsDestroy(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.takhtitsDestroy(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts a JSON array of strings with the format \'{surah}:{ayah}\' that denote the ayah at which a new breaker (page by default) begins. Existing breakers whose names start with the provided breaker type (default: \'page\') will be removed before importing the new ones.
         * @summary Import Ayah Breakers for the specified Takhtit
         * @param {string} uuid 
         * @param {File} file Text/JSON file containing a list of breakers (e.g. [\\\&#39;2:1\\\&#39;, \\\&#39;2:6\\\&#39;]).
         * @param {string} [type] Breaker type (e.g., page, juz, hizb, ruku). Defaults to \&#39;page\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsImportCreate(uuid: string, file: File, type?: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.takhtitsImportCreate(uuid, file, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Takhtits (text annotations/notes)
         * @param {TakhtitsListMushafEnum} [mushaf] Short name of the Mushaf to filter Takhtits by. Common value: \&#39;hafs\&#39;. Any string is accepted. (e.g. \&#39;hafs\&#39;, \&#39;warsh\&#39;, etc.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsList(mushaf?: TakhtitsListMushafEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<Takhtit>> {
            return localVarFp.takhtitsList(mushaf, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Partially update a Takhtit record
         * @param {string} uuid 
         * @param {PatchedTakhtit} [patchedTakhtit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsPartialUpdate(uuid: string, patchedTakhtit?: PatchedTakhtit, options?: RawAxiosRequestConfig): AxiosPromise<Takhtit> {
            return localVarFp.takhtitsPartialUpdate(uuid, patchedTakhtit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific Takhtit by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsRetrieve(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Takhtit> {
            return localVarFp.takhtitsRetrieve(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Takhtit record
         * @param {string} uuid 
         * @param {Takhtit} takhtit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsUpdate(uuid: string, takhtit: Takhtit, options?: RawAxiosRequestConfig): AxiosPromise<Takhtit> {
            return localVarFp.takhtitsUpdate(uuid, takhtit, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new words_breaker to this takhtit. Requires word_uuid in the request body. Only type \'line\' is allowed.
         * @summary Add a words_breaker to this takhtit
         * @param {string} uuid 
         * @param {TakhtitsWordsBreakersCreateRequest} [takhtitsWordsBreakersCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsWordsBreakersCreate(uuid: string, takhtitsWordsBreakersCreateRequest?: TakhtitsWordsBreakersCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<WordBreakerDetailResponse> {
            return localVarFp.takhtitsWordsBreakersCreate(uuid, takhtitsWordsBreakersCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a flat list containing an entry for every word with a breaker for this takhtit, with a line counter (incremented for each breaker).
         * @summary List all words_breakers for this takhtit (with line counters)
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsWordsBreakersList(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<WordBreakersResponse>> {
            return localVarFp.takhtitsWordsBreakersList(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific words_breaker for this takhtit
         * @param {string} breakerUuid UUID of the words_breaker.
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takhtitsWordsBreakersRetrieve(breakerUuid: string, uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<WordBreakerDetailResponse> {
            return localVarFp.takhtitsWordsBreakersRetrieve(breakerUuid, uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TakhtitsApi - object-oriented interface
 */
export class TakhtitsApi extends BaseAPI {
    /**
     * Add a new ayahs_breaker to this takhtit. Requires ayah_uuid in the request body.
     * @summary Add an ayahs_breaker to this takhtit
     * @param {string} uuid 
     * @param {TakhtitsAyahsBreakersCreateRequest} [takhtitsAyahsBreakersCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsAyahsBreakersCreate(uuid: string, takhtitsAyahsBreakersCreateRequest?: TakhtitsAyahsBreakersCreateRequest, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsAyahsBreakersCreate(uuid, takhtitsAyahsBreakersCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a flat list containing an entry for every ayah in this takhtit, with breaker info similar to the mushaf ayah_map action.
     * @summary List all ayahs_breakers for this takhtit (ayahs map style)
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsAyahsBreakersList(uuid: string, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsAyahsBreakersList(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific ayahs_breaker for this takhtit
     * @param {string} breakerUuid UUID of the ayahs_breaker.
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsAyahsBreakersRetrieve(breakerUuid: string, uuid: string, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsAyahsBreakersRetrieve(breakerUuid, uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Takhtit. Requires mushaf_uuid and account_uuid in the request body.
     * @summary Create a new Takhtit record
     * @param {TakhtitsCreateRequest} [takhtitsCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsCreate(takhtitsCreateRequest?: TakhtitsCreateRequest, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsCreate(takhtitsCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Takhtit record
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsDestroy(uuid: string, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsDestroy(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts a JSON array of strings with the format \'{surah}:{ayah}\' that denote the ayah at which a new breaker (page by default) begins. Existing breakers whose names start with the provided breaker type (default: \'page\') will be removed before importing the new ones.
     * @summary Import Ayah Breakers for the specified Takhtit
     * @param {string} uuid 
     * @param {File} file Text/JSON file containing a list of breakers (e.g. [\\\&#39;2:1\\\&#39;, \\\&#39;2:6\\\&#39;]).
     * @param {string} [type] Breaker type (e.g., page, juz, hizb, ruku). Defaults to \&#39;page\&#39;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsImportCreate(uuid: string, file: File, type?: string, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsImportCreate(uuid, file, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Takhtits (text annotations/notes)
     * @param {TakhtitsListMushafEnum} [mushaf] Short name of the Mushaf to filter Takhtits by. Common value: \&#39;hafs\&#39;. Any string is accepted. (e.g. \&#39;hafs\&#39;, \&#39;warsh\&#39;, etc.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsList(mushaf?: TakhtitsListMushafEnum, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsList(mushaf, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Partially update a Takhtit record
     * @param {string} uuid 
     * @param {PatchedTakhtit} [patchedTakhtit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsPartialUpdate(uuid: string, patchedTakhtit?: PatchedTakhtit, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsPartialUpdate(uuid, patchedTakhtit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific Takhtit by UUID
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsRetrieve(uuid: string, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsRetrieve(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Takhtit record
     * @param {string} uuid 
     * @param {Takhtit} takhtit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsUpdate(uuid: string, takhtit: Takhtit, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsUpdate(uuid, takhtit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new words_breaker to this takhtit. Requires word_uuid in the request body. Only type \'line\' is allowed.
     * @summary Add a words_breaker to this takhtit
     * @param {string} uuid 
     * @param {TakhtitsWordsBreakersCreateRequest} [takhtitsWordsBreakersCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsWordsBreakersCreate(uuid: string, takhtitsWordsBreakersCreateRequest?: TakhtitsWordsBreakersCreateRequest, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsWordsBreakersCreate(uuid, takhtitsWordsBreakersCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a flat list containing an entry for every word with a breaker for this takhtit, with a line counter (incremented for each breaker).
     * @summary List all words_breakers for this takhtit (with line counters)
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsWordsBreakersList(uuid: string, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsWordsBreakersList(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific words_breaker for this takhtit
     * @param {string} breakerUuid UUID of the words_breaker.
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public takhtitsWordsBreakersRetrieve(breakerUuid: string, uuid: string, options?: RawAxiosRequestConfig) {
        return TakhtitsApiFp(this.configuration).takhtitsWordsBreakersRetrieve(breakerUuid, uuid, options).then((request) => request(this.axios, this.basePath));
    }
}

export const TakhtitsListMushafEnum = {
    Hafs: 'hafs'
} as const;
export type TakhtitsListMushafEnum = typeof TakhtitsListMushafEnum[keyof typeof TakhtitsListMushafEnum];
