/* tslint:disable */
/* eslint-disable */
/**
 * Natiq API
 * Natiq Quran API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PatchedWord } from '../models';
// @ts-ignore
import type { Word } from '../models';
/**
 * WordsApi - axios parameter creator
 */
export const WordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Word record
         * @param {Word} word 
         * @param {string} [ayahUuid] UUID of the Ayah to associate the new Word with (if ayah_id is not provided in the body).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordsCreate: async (word: Word, ayahUuid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'word' is not null or undefined
            assertParamExists('wordsCreate', 'word', word)
            const localVarPath = `/words/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ayahUuid !== undefined) {
                localVarQueryParameter['ayah_uuid'] = ayahUuid;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(word, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Word record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordsDestroy: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('wordsDestroy', 'uuid', uuid)
            const localVarPath = `/words/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Words in Ayahs
         * @param {string} [ayahUuid] UUID of the Ayah to filter Words by.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {WordsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordsList: async (ayahUuid?: string, limit?: number, offset?: number, ordering?: WordsListOrderingEnum, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/words/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ayahUuid !== undefined) {
                localVarQueryParameter['ayah_uuid'] = ayahUuid;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partially update a Word record
         * @param {string} uuid 
         * @param {PatchedWord} [patchedWord] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordsPartialUpdate: async (uuid: string, patchedWord?: PatchedWord, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('wordsPartialUpdate', 'uuid', uuid)
            const localVarPath = `/words/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedWord, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific Word by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordsRetrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('wordsRetrieve', 'uuid', uuid)
            const localVarPath = `/words/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Word record
         * @param {string} uuid 
         * @param {Word} word 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordsUpdate: async (uuid: string, word: Word, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('wordsUpdate', 'uuid', uuid)
            // verify required parameter 'word' is not null or undefined
            assertParamExists('wordsUpdate', 'word', word)
            const localVarPath = `/words/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication knoxApiToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(word, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WordsApi - functional programming interface
 */
export const WordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WordsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Word record
         * @param {Word} word 
         * @param {string} [ayahUuid] UUID of the Ayah to associate the new Word with (if ayah_id is not provided in the body).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordsCreate(word: Word, ayahUuid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Word>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordsCreate(word, ayahUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsApi.wordsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Word record
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordsDestroy(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordsDestroy(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsApi.wordsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all Words in Ayahs
         * @param {string} [ayahUuid] UUID of the Ayah to filter Words by.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {WordsListOrderingEnum} [ordering] Which field to use when ordering the results.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordsList(ayahUuid?: string, limit?: number, offset?: number, ordering?: WordsListOrderingEnum, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Word>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordsList(ayahUuid, limit, offset, ordering, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsApi.wordsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Partially update a Word record
         * @param {string} uuid 
         * @param {PatchedWord} [patchedWord] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordsPartialUpdate(uuid: string, patchedWord?: PatchedWord, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Word>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordsPartialUpdate(uuid, patchedWord, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsApi.wordsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific Word by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordsRetrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Word>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordsRetrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsApi.wordsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing Word record
         * @param {string} uuid 
         * @param {Word} word 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordsUpdate(uuid: string, word: Word, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Word>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordsUpdate(uuid, word, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsApi.wordsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WordsApi - factory interface
 */
export const WordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WordsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Word record
         * @param {WordsApiWordsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordsCreate(requestParameters: WordsApiWordsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Word> {
            return localVarFp.wordsCreate(requestParameters.word, requestParameters.ayahUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Word record
         * @param {WordsApiWordsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordsDestroy(requestParameters: WordsApiWordsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.wordsDestroy(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Words in Ayahs
         * @param {WordsApiWordsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordsList(requestParameters: WordsApiWordsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Word>> {
            return localVarFp.wordsList(requestParameters.ayahUuid, requestParameters.limit, requestParameters.offset, requestParameters.ordering, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Partially update a Word record
         * @param {WordsApiWordsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordsPartialUpdate(requestParameters: WordsApiWordsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Word> {
            return localVarFp.wordsPartialUpdate(requestParameters.uuid, requestParameters.patchedWord, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific Word by UUID
         * @param {WordsApiWordsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordsRetrieve(requestParameters: WordsApiWordsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Word> {
            return localVarFp.wordsRetrieve(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Word record
         * @param {WordsApiWordsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordsUpdate(requestParameters: WordsApiWordsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Word> {
            return localVarFp.wordsUpdate(requestParameters.uuid, requestParameters.word, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for wordsCreate operation in WordsApi.
 */
export interface WordsApiWordsCreateRequest {
    readonly word: Word

    /**
     * UUID of the Ayah to associate the new Word with (if ayah_id is not provided in the body).
     */
    readonly ayahUuid?: string
}

/**
 * Request parameters for wordsDestroy operation in WordsApi.
 */
export interface WordsApiWordsDestroyRequest {
    readonly uuid: string
}

/**
 * Request parameters for wordsList operation in WordsApi.
 */
export interface WordsApiWordsListRequest {
    /**
     * UUID of the Ayah to filter Words by.
     */
    readonly ayahUuid?: string

    /**
     * Number of results to return per page.
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     */
    readonly offset?: number

    /**
     * Which field to use when ordering the results.
     */
    readonly ordering?: WordsListOrderingEnum

    /**
     * A search term.
     */
    readonly search?: string
}

/**
 * Request parameters for wordsPartialUpdate operation in WordsApi.
 */
export interface WordsApiWordsPartialUpdateRequest {
    readonly uuid: string

    readonly patchedWord?: PatchedWord
}

/**
 * Request parameters for wordsRetrieve operation in WordsApi.
 */
export interface WordsApiWordsRetrieveRequest {
    readonly uuid: string
}

/**
 * Request parameters for wordsUpdate operation in WordsApi.
 */
export interface WordsApiWordsUpdateRequest {
    readonly uuid: string

    readonly word: Word
}

/**
 * WordsApi - object-oriented interface
 */
export class WordsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Word record
     * @param {WordsApiWordsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public wordsCreate(requestParameters: WordsApiWordsCreateRequest, options?: RawAxiosRequestConfig) {
        return WordsApiFp(this.configuration).wordsCreate(requestParameters.word, requestParameters.ayahUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Word record
     * @param {WordsApiWordsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public wordsDestroy(requestParameters: WordsApiWordsDestroyRequest, options?: RawAxiosRequestConfig) {
        return WordsApiFp(this.configuration).wordsDestroy(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Words in Ayahs
     * @param {WordsApiWordsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public wordsList(requestParameters: WordsApiWordsListRequest = {}, options?: RawAxiosRequestConfig) {
        return WordsApiFp(this.configuration).wordsList(requestParameters.ayahUuid, requestParameters.limit, requestParameters.offset, requestParameters.ordering, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Partially update a Word record
     * @param {WordsApiWordsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public wordsPartialUpdate(requestParameters: WordsApiWordsPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return WordsApiFp(this.configuration).wordsPartialUpdate(requestParameters.uuid, requestParameters.patchedWord, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific Word by UUID
     * @param {WordsApiWordsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public wordsRetrieve(requestParameters: WordsApiWordsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return WordsApiFp(this.configuration).wordsRetrieve(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Word record
     * @param {WordsApiWordsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public wordsUpdate(requestParameters: WordsApiWordsUpdateRequest, options?: RawAxiosRequestConfig) {
        return WordsApiFp(this.configuration).wordsUpdate(requestParameters.uuid, requestParameters.word, options).then((request) => request(this.axios, this.basePath));
    }
}

export const WordsListOrderingEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type WordsListOrderingEnum = typeof WordsListOrderingEnum[keyof typeof WordsListOrderingEnum];
